#!/usr/bin/env python
import sys
import os
import Bio
import argparse





def read_groups(filename):
    '''
    This function opens the file generated by mcl and stores it as a dictionary where:
        The key is a string with the group ID given by MCL, e.g. group00001
        The values are a list of the identifiers.
    '''
    handle_in = open(filename, "rU")
    groups = dict()
    for line in handle_in:
        line = line.strip().split(" ")
        group = line[0].strip(":")
        groups[group] = line[1:]
    return groups



def print_statistics(groups_dict):
    '''
    This function prints the identifiers of a cluster and the number of elements 
    in it.
        Input: a dictionary
        Output: Text
    '''
    for group in sorted(groups_dict):
        print(group + "\t" + str(len(groups_dict[group])))



def get_specimen_name(string):
    '''
    This mock function takes a identifier of a sequence marked by OrthoMCL and 
    returns the specimen identifier: "drer|comp05_c1_l1" -> "drer"
    '''
    return string.split("|")[0]



def get_specimens_from_list(list_of_proteins):
    """
    This function extract all the specimen identifiers from a list of sequence 
    identifiers, SORTED, not in the given order.
    """
    return sorted(map(get_specimen_name, list_of_proteins))



def filter_cluster_by_species(list_of_proteins, specimens):
    """
    Given
        A list of sequence identifiers
        A set of specimens
    Returns
        The same list of proteins if it contains exactly one of all the specimens
        None otherwise
    """
    specimens = sorted(specimens)
    specimens_in_list = sorted(get_specimens_from_list(list_of_proteins))
    if specimens == specimens_in_list:
        return list_of_proteins
    else:
        return None



def get_single_copy_orthologs(groups, specimens):
    """
    Given
        a dictionary of clusters,
        A set of speciments
    returns 
        A dictionary of clusters containing exactly one sequence of each one of the specimens (single copy orthologs)
    """
    single_copy_orthologs = {}
    for group in groups:
        list_of_identifiers = filter_cluster_by_species(groups[group], specimens)
        if list_of_identifiers != None:
            single_copy_orthologs[group]= list_of_identifiers
    return single_copy_orthologs



def extract_single_copy_orthologs(single_copy_orthologs_dict, fasta_filename, output_folder):
    """
    Given
        A dictionary with the single copy orthologs in the form {group: [seq1,seq2,...,seqN]}
        A fasta filename in which are all the sequence to be extracted (the "goodProteins.fasta" generated by
            OrthoMCLFilterFasta)
        An output folder (which will be created, or if existing, everything inside deleted)
    Returns
        A list of fasta files, one per group in the dictionary, containing the sequences that conform the
            defined cluster in `single_copy_orthologs_dict`. Filenames will be of the form group00001.fasta
    Requirements:
        This program will make use of cdbfasta and cdbyank, which are insanelly fast when extracting sequences
    """
    from Bio import SeqIO # To manipulate fasta files
    import os             # To manipulate files in general
    import sys            # To send error messages
    
    # Directory existance and creation
    #if os.path.isdir(output_folder):
    #    sys.exit("ERROR! Output folder already exists! Remove it before proceeding.")
    if not os.path.isfile(fasta_filename):
        sys.exit("ERROR! Fasta file does not exist!")
    if type(single_copy_orthologs_dict) is not dict:
        sys.exit("ERROR! First parameter is not a dictionary!")
    
    # Make output folder
    #os.mkdir(output_folder)
    
    # Read and index the input fasta file:    
    fasta_as_dict = SeqIO.to_dict(SeqIO.parse(fasta_filename, "fasta"))

    for group in single_copy_orthologs_dict.keys():
        out_filename = output_folder + "/" + group + ".fasta"
        records = []
        for identifier in single_copy_orthologs_dict[group]:
            # Get the record
            record = fasta_as_dict[identifier]
            # As identifier, we will only retain the organism name:
            # The rest of the identifier and the description will be removed
            # This eases the processing with phyml since it will cut identifiers
            # wherever it pleases
            new_identifier = identifier.split("|")[0]
            record.id = new_identifier
            record.description = ""
            records.append(record)
        SeqIO.write(records, out_filename, "fasta")


# Parse arguments
parser = argparse.ArgumentParser(
    description="Extract the Simple Copy Orthologs from OrthoMCL",
    prog= "extract_single_copy_orthologs.py",
    usage='%(prog)s -d outdir -f goodProteins.fasta -g groups.txt -s spp1 spp2 spp3 ...')

parser.add_argument("-d", "--out_dir",
    dest="dir_output",
    help="path to the output directory",
    required=True)

parser.add_argument("-f", "--infasta",
    dest="fasta_filename",
    help="Fasta file with the Proteins where all the sequence are stored (goodProteins.fasta)",
    required=True)

parser.add_argument("-g", "--groups",
    dest="group_filename",
    help="File with the output of OrthoMCL (groups.txt)",
    required=True)

parser.add_argument("-s", "--species",
    dest="species",
    help="List of species from which you want to extract the single copy ortholog groups, >= 2",
    nargs="+",
    required=True)

args = parser.parse_args()

if len(args.species) < 2:
    sys.exit("ERROR! Incorrect number of species")

def main():
    groups = read_groups(args.group_filename)
    sco = get_single_copy_orthologs(groups, args.species)
    extract_single_copy_orthologs(sco, args.fasta_filename, args.dir_output)

main()
