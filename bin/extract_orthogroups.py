#!/usr/bin/env python3

'''
Create fasta files from the results from Orthofinder / OrthoMCL
python3 extract_orthogroups.py
    --out_dir test \
    --in_fasta goodProteins.fasta \
    --groups Orthologousgroups.txt \
    --minimum 1
'''
import argparse  # To handle flags and arguments
from Bio import SeqIO  # To manipulate fasta files
import os  # To manipulate files in general
import sys  # To send error messages

__author__ = "Jorge Langa"
__copyright__ = "Copyright 2016, Jorge Langa"
__credits__ = ["Jorge Langa"]
__license__ = "MIT"
__version__ = "0.0.1"
__maintainer__ = "Jorge Langa"
__email__ = "jorge.langa.arranz@gmail.com"
__status__ = "Prototype"


def read_groups(filename):
    '''
    This function opens the file generated by mcl and stores it as a
    dictionary where:
        The key is a string with the group ID given by MCL, e.g. group00001
        The values are a list of the identifiers.
    '''
    handle_in = open(filename, "rU")
    groups = dict()
    for line in handle_in:
        line = line.strip().split(" ")
        group = line[0].strip(":")
        groups[group] = line[1:]
    return groups


def extract_orthogroups(
    group_dictionary,
    fasta_filename,
    output_folder,
    minimum_sequences
):
    """
    Given
        - A dictionary with the orthogroups in the form
        {group: [seq1,seq2,...,seqN]}
        - A fasta filename in which are all the sequence to be extracted (the
        "goodProteins.fasta" generated by OrthoMCLFilterFasta)
        - An output folder (which will be created, or if existing, everything
        inside deleted)
    Returns
        A list of fasta files, one per group in the dictionary, containing the
        sequences that conform the defined cluster in `OrthologousGroups.txt`.
        Filenames will have the orthofinder group convention the form
        OG000000.fasta
    """
    if not os.path.isfile(fasta_filename):
        sys.exit(
            "ERROR! Fasta file does not exist!"
        )
    if type(group_dict) is not dict:
        sys.exit(
            "ERROR! First parameter is not a dictionary!"
        )
    # Make output folder
    #os.mkdir(output_folder)
    # Read and index the input fasta file:
    fasta_as_dict = SeqIO.to_dict(SeqIO.parse(fasta_filename, "fasta"))
    # Start working with each group
    for group in group_dictionary.keys():
        out_filename = output_folder + "/" + group + ".fasta"
        records = []
        for identifier in group_dictionary[group]:
            # Get the record
            record = fasta_as_dict[identifier]
            new_identifier = identifier.split("|")[0]
            record.id = new_identifier
            # Delete the description
            record.description = ""
            records.append(record)
        if len(records) >= minimum_sequences:
            SeqIO.write(records, out_filename, "fasta")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="Extract the Orthogroups from orthofinder/OrthoMCL into "
        "different fasta files",
        prog="extract_orthogroups.py",
        usage='%(prog)s -d outdir -f goodProteins.fasta -g groups.txt -m 1'
    )

    parser.add_argument(
        "-d", "--out_dir",
        dest="dir_output",
        help="path to the output directory",
        required=True
    )

    parser.add_argument(
        "-f", "--in_fasta",
        dest="fasta_filename",
        help="Fasta file with the sequences stored (goodProteins.fasta) or "
        "simmilar.",
        required=True
    )

    parser.add_argument(
        "-g", "--groups",
        dest="group_filename",
        help="File with the output of OrthoMCL (groups.txt)",
        required=True
    )

    parser.add_argument(
        "-m", "--minimum_sequences",
        dest="minimum_sequences",
        help="Minimum number of sequences to call an orthogroup. Default=1",
        default=1,
        required=False
    )

    args = parser.parse_args()

    group_dict = read_groups(
        args.group_filename
    )

    extract_orthogroups(
        group_dict,
        args.fasta_filename,
        args.dir_output,
        int(args.minimum_sequences)
    )
